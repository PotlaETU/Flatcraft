@startuml
class CellGrid {
+ boolean move(IMovable)
+ boolean dig(Player)
}
abstract AbstractCell {
- int row
- int column
- ObjectProperty<Sprite> spriteProperty
- ObjectProperty<Resource> resourceProperty
+ int getRow()
+ int getColumn()
+ Sprite getSprite()
+ ObjectProperty<Sprite> getSpriteProperty()
+ Resource getResource()
+ ObjectProperty<Resource> getResourceProperty()
+ void replaceBy(Cell)
+ {abstract}boolean dig(Player)
}
class CellGridFactory {
- Random RANDOM
~ ISpriteStore spriteStore
+ void setSpriteStore(ISpriteStore)
+ Cell createSky()
+ Cell createSoilSurface()
+ Cell createSubSoil()
+ Cell createTrunk()
+ Cell createLeaves()
}
class MyGenarateMap {
- int heigth
- int width
- Random RANDOM
- CellFactory factory
+ void setSpriteStore(ISpriteStore)
+ GameMap createMap()
}
class SimpleGameMap {
- Cell[][] cells
- int height
- int width
- int soilHeight
- void init()
+ int getHeight()
+ int getWidth()
+ int getSoilHeight()
+ Cell getAt(int,int)
+ void setAt(int,int,Cell)
}

class Player {
- IntegerProperty health
- ObservableMap<Resource,Integer> inventory
+ <<Create>> Player(FlatcraftGame,double,double,Sprite)
+ int getHealth()
+ IntegerProperty getHealthProperty()
+ int getXp()
+ IntegerProperty getXpProperty()
+ ObservableMap<Resource,Integer> getInventory()
+ void setHealth(int)
+ void setXp(int)
+ void setInventory(ObservableMap<Resource,Integer>)
+ void addInventory(Resource)
+ void delInventory(Resource)
}
abstract class AbstractMovable {
# FlatcraftGame game
# DoubleProperty xPosition
# DoubleProperty yPosition
# double horizontalSpeed
# double verticalSpeed
# ObjectProperty<Sprite> sprite
# <<Create>> AbstractMovable(FlatcraftGame,double,double,Sprite)
+ int getWidth()
+ int getHeight()
+ void setX(int)
+ int getX()
+ DoubleProperty getXProperty()
+ void setY(int)
+ int getY()
+ DoubleProperty getYProperty()
+ void setHorizontalSpeed(double)
+ double getHorizontalSpeed()
+ void setVerticalSpeed(double)
+ double getVerticalSpeed()
+ void setSprite(Sprite)
+ Sprite getSprite()
+ ObjectProperty<Sprite> getSpriteProperty()
+ boolean move(long)
- {static} double updatePosition(double,double,long,int,int)
+ IMovable self()
+ int hashCode()
+ boolean equals(Object)
}


AbstractMovable <|-- Player
IMovable <|.. AbstractMovable



AbstractCell <|-- CellGrid
Cell <|.. AbstractCell
CellFactory <|.. CellGridFactory
GameMap <|.. SimpleGameMap
@enduml